# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'heyelth.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
from utils import notify


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(451, 640)
        MainWindow.setFixedSize(451, 640)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.logo.setGeometry(QtCore.QRect(50, 0, 341, 241))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("utils/icon.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(-10, 220, 471, 111))
        font = QtGui.QFont()
        font.setFamily("Cinzel")
        font.setPointSize(45)
        font.setBold(True)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setStyleSheet("QLabel { color: #515050; }")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.tagline = QtWidgets.QLabel(self.centralwidget)
        self.tagline.setGeometry(QtCore.QRect(-20, 310, 481, 51))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(17)
        self.tagline.setFont(font)
        self.tagline.setAlignment(QtCore.Qt.AlignCenter)
        self.tagline.setObjectName("tagline")
        self.run_button = QtWidgets.QPushButton(self.centralwidget)
        self.run_button.setGeometry(QtCore.QRect(50, 400, 351, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(20)
        self.run_button.setFont(font)
        self.run_button.setStyleSheet("QPushButton {\n"
"    background-color: #ED254E;\n"
"    border-color: #ED254E;\n"
"    border-radius: 14;\n"
"    color: white;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #c41b3f;\n"
"}")
        self.run_button.setObjectName("run_button")
        self.calibrate_button = QtWidgets.QPushButton(self.centralwidget)
        self.calibrate_button.setGeometry(QtCore.QRect(50, 480, 351, 61))
        font = QtGui.QFont()
        font.setFamily("Poppins")
        font.setPointSize(20)
        self.calibrate_button.setFont(font)
        self.calibrate_button.setStyleSheet("QPushButton {\n"
"    background-color: #cfcfcf;\n"
"    color: black;\n"
"    border-color: #cfcfcf;\n"
"    border-radius: 14;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #ada6a6;\n"
"}")
        self.calibrate_button.setObjectName("calibrate_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 451, 24))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionInformation = QtWidgets.QAction(MainWindow)
        self.actionInformation.setObjectName("actionInformation")
        self.actionCreator = QtWidgets.QAction(MainWindow)
        self.actionCreator.setObjectName("actionCreator")
        self.menuFile.addAction(self.actionInformation)
        self.menuFile.addAction(self.actionCreator)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.run_button.clicked.connect(self.run_clicked)
        self.calibrate_button.clicked.connect(self.calibrate_clicked)

        self.actionInformation.triggered.connect(self.show_information)
        self.actionCreator.triggered.connect(self.about_creator)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Heyelth"))
        self.title.setText(_translate("MainWindow", "H<u>eye</u>lth"))
        self.tagline.setText(_translate("MainWindow", "Better vision for a great life"))
        self.run_button.setStatusTip(_translate("MainWindow", "Run the app!"))
        self.run_button.setWhatsThis(_translate("MainWindow", "Run Button to start the app"))
        self.run_button.setText(_translate("MainWindow", "Run"))
        self.calibrate_button.setStatusTip(_translate("MainWindow", "Calibrate the detector if you think the app isnt working properly"))
        self.calibrate_button.setText(_translate("MainWindow", "Calibrate"))
        self.menuFile.setTitle(_translate("MainWindow", "About"))
        self.actionInformation.setText(_translate("MainWindow", "Information"))
        self.actionInformation.setStatusTip(_translate("MainWindow", "Information about the app!"))
        self.actionCreator.setText(_translate("MainWindow", "Creator"))
        self.actionCreator.setStatusTip(_translate("MainWindow", "Know me!"))
    
    def run_clicked(self):
        notify("Heyelth", "The app is now running in the background!")
        print("Run was clicked")
        print("Running the program")
        os.system("python main.py")

    def calibrate_clicked(self):
        print("calbirate was clicked")
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Calibration Instructions")
        msg.setText("Your video will now appear in front of you. You will be able to see a number counting up to 10.\nBlink your eyes each time the number goes up.")
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setInformativeText("Click OK to continue.")

        msg.setStandardButtons(QtWidgets.QMessageBox.Ok|QtWidgets.QMessageBox.Cancel)
        msg.setDefaultButton(QtWidgets.QMessageBox.Ok)

        msg.buttonClicked.connect(self.calibrate_popup_btn_clicked)
        x = msg.exec_()
    
    def calibrate_popup_btn_clicked(self, i):
        if "OK" in i.text().upper():
            os.system("python calibrate.py")
            print("Running calibrate.py")
    
    def show_information(self):
        infoBox = QtWidgets.QMessageBox()
        infoBox.setWindowTitle("About Heyelth!")
        infoBox.setIcon(QtWidgets.QMessageBox.Question)
        infoBox.setText("Computer Vision Syndrome is a very common medical condition caused by eye strain.\n\nHowever, it can be easily prevented by simple measures.\n\nMost people blink 60% less times when they are on screen. We can reduce the eye strain just by blinking more often\n\nLong durations of screen time without break takes a toll on your eyes. So we should follow the 20/20/20 rule which involves taking a break every 20 minutes to look at something 20 feet away for 20 seconds.")
        infoBox.setInformativeText("Heyelth helps us to achieve a new level of Vision Care!\nIt monitors our blink rate and reminds us to blink frequently if our blink rate is less! Blinksters!\nIt also reminds us to take a break every 20 minutes!\n\n")

        x = infoBox.exec_()

    def about_creator(self):
        msgBox = QtWidgets.QMessageBox()
        msgBox.setWindowTitle("About Me!")
        msgBox.setIcon(QtWidgets.QMessageBox.Information)
        msgBox.setText("Hi, I am Garvit Singh!\nI'm 16 years old and I'm in Grade 11.")
        msgBox.setInformativeText("I'm a machine learning and cybersecurity enthusiast!")

        x = msgBox.exec_()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
